# -*- coding: utf-8 -*-
"""Assignment_4

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Xw5iGxe8XsbG_2WO1kXQVDjSmYFxk4pQ

# Assignment 4: #

Step 2: Tweet extraction using search API and streaming API
"""

#Drive mounting
from google.colab import drive
drive.mount('/content/drive')

from pymongo import MongoClient

from prettytable import PrettyTable

pip install pymongo[srv]

!pip install dnspython

import re

positive_words_dict = []
with open("/content/drive/MyDrive/MS/Sem-2/Data_Assignment4/PositiveWord.txt") as file:  # positive-words.txt [1]
    for line in file:
        line = re.sub("\n", "", line)
        positive_words_dict.append(line)

print(positive_words_dict)

negative_words_dict = []
with open("/content/drive/MyDrive/MS/Sem-2/Data_Assignment4/NegativeWord.txt") as file:  # negative-words.txt [1]
    for line in file:
        line = re.sub("\n", "", line)
        negative_words_dict.append(line)
    
print(negative_words_dict)

def word_count(words):
    #print(words)
    wdict = {}
    words = words.split()
    #print(words)
    for word in words:
        try:
            wdict[word] += 1
        except KeyError:
            wdict[word] = 1
    return wdict

def attachPolarity(tweet_text):
    print("Bag of words:" ,word_count(str(tweet_text)))
    positive_matches = []
    negative_matches = []
    words = tweet_text.split()
    for word in words:
        if word in positive_words_dict:
            print("Positive Word Found:", word)
            positive_matches.append(word)
        elif word in negative_words_dict:
            print("Negative Word Found:", word)
            negative_matches.append(word)

    if len(positive_matches) > len(negative_matches):
        polarity = "positive"
    elif len(negative_matches) > len(positive_matches):
        polarity = "negative"
    else:
        polarity = "neutral"
    print("Polarity = ", polarity)
    print("Total Positive Matches:" ,len(positive_matches))
    print("Total Negative Matches:" ,len(negative_matches))

import csv

from os import listdir
from os.path import isfile, join
import os
import pandas as pd

tweets = []
path = '/content/drive/MyDrive/MS/Sem-2/Data_Assignment4/data/'
entries = os.listdir('/content/drive/MyDrive/MS/Sem-2/Data_Assignment4/data/')
t = PrettyTable(["#", "Tweet", "Polarity", "Positive Matches", "Negative Matches"])
for entry in entries:
  csv_file = path + entry
  with open(csv_file, encoding='utf-8') as csv_file:
    df = pd.read_csv(csv_file)
    saved_column = df['text'].to_list() #you can also use df['column_name']
    for s in saved_column:
      attachPolarity(str(s))

"""**Section 3**"""

username = "Janvi_User"
password = "wV5Tg3Lx8rbQnEM"
dest = "MyDatabase"

#connecting mongodb using mongoclient
client = MongoClient(f'mongodb+srv://{username}:{password}@cluster0.ielph.mongodb.net/{dest}?retryWrites=true&w=majority')
print("Connection established successfully...!!!")

#connecting to database
mongo_db = client["MyDatabase"]
mongo_col = mongo_db["MyDatabase"]
print("Connected to Database")

interested_words = ["flu", "snow", "cold"]

table = PrettyTable(["Query", "df", "N/df", "Log10(N/df)"])
for word in interested_words:
    query = {"body": {"$regex": f".*{word}.*", "$options": "i"}}
    df = mongoCol.count_documents(query)
    if df > 0:
        table.add_row([word, df, f"{N}/{df}", log10(N / df)])
    else:
        table.add_row([word, df, "-", "-"])
print(table)

query = {"body": {"$regex": ".*snow.*", "$options": "i"}}
canada_articles = mongoCol.find(query)

table = PrettyTable(["Article #", "Total Words(m)", "Frequency (f)"])
i = 1
for canada_article in canada_articles:
    body = canada_article.get("body")
    table.add_row([i, len(body.split(" ")), body.count("snow")])
    i = i + 1

print(table)